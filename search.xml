<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>后缀自动机</title>
    <url>/2019/10/14/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<p>模板</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">state</span> &#123;</span></span><br><span class="line">		<span class="keyword">int</span> len, p, cnt; <span class="comment">// cnt -&gt; size of right</span></span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; go;</span><br><span class="line">		state(<span class="keyword">int</span> _len = <span class="number">0</span>, <span class="keyword">int</span> _p = <span class="number">-1</span>, <span class="keyword">int</span> _cnt = <span class="number">0</span>) &#123;</span><br><span class="line">			len = _len, p = _p, cnt = _cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> last, sz;</span><br><span class="line">	<span class="built_in">vector</span>&lt;state&gt; t;</span><br><span class="line">	SAM() &#123;</span><br><span class="line">		last = <span class="number">0</span>;</span><br><span class="line">		sz = <span class="number">1</span>;</span><br><span class="line">		t.push_back(&#123;&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">inline</span> state&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="keyword">return</span> t[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = sz++;</span><br><span class="line">		t.push_back(&#123;t[last].len + <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;);</span><br><span class="line">		<span class="keyword">int</span> x = last;</span><br><span class="line">		<span class="keyword">while</span> (x != <span class="number">-1</span> &amp;&amp; t[x].go.count(c) == <span class="number">0</span>) &#123;</span><br><span class="line">			t[x].go[c] = cur;</span><br><span class="line">			x = t[x].p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">-1</span>) &#123;</span><br><span class="line">			t[cur].p = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> y = t[x].go[c];</span><br><span class="line">			<span class="keyword">if</span> (t[y].len == t[x].len + <span class="number">1</span>) &#123;</span><br><span class="line">				t[cur].p = y;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> z = sz++;</span><br><span class="line">				t.push_back(t[y]);</span><br><span class="line">				t[z].len = t[x].len + <span class="number">1</span>;</span><br><span class="line">				t[z].cnt = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (x != <span class="number">-1</span> &amp;&amp; t[x].go[c] == y) &#123;</span><br><span class="line">					t[x].go[c] = z;</span><br><span class="line">					x = t[x].p;</span><br><span class="line">				&#125;</span><br><span class="line">				t[cur].p = t[y].p = z;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		last = cur;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; adj(sam.sz); <span class="comment">// parent tree</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = sam.sz - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">  adj[sam[i].p].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) &#123;</span><br><span class="line">		dfs(v);</span><br><span class="line">		sam[u].cnt += sam[v].cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sam[u].cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">	  ans = max(ans, (LL)sam[u].cnt * sam[u].len);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>可持久化Trie</title>
    <url>/2019/10/12/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96Trie/</url>
    <content><![CDATA[<p>模板</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  node *l, *r;</span><br><span class="line">  <span class="keyword">int</span> sz;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;sz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;sz += l-&gt;sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;sz += r-&gt;sz;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; pool[maxn * <span class="number">24</span>];</span><br><span class="line"><span class="function">node *<span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &amp;pool[cnt++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *pre, <span class="keyword">int</span> bit, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  node *cur = newnode();</span><br><span class="line">  <span class="keyword">if</span> (pre) &#123;</span><br><span class="line">    *cur = *pre;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (bit &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    cur-&gt;sz++;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (val &gt;&gt; bit &amp; <span class="number">1</span>) &#123;</span><br><span class="line">    cur-&gt;r = insert(pre ? pre-&gt;r : <span class="literal">NULL</span>, bit - <span class="number">1</span>, val);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cur-&gt;l = insert(pre ? pre-&gt;l : <span class="literal">NULL</span>, bit - <span class="number">1</span>, val);</span><br><span class="line">  &#125;</span><br><span class="line">  cur-&gt;pull();</span><br><span class="line">  <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(node *cur, node *pre, <span class="keyword">int</span> bit, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bit &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> now = val &gt;&gt; bit &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (now == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> rsz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (cur &amp;&amp; cur-&gt;r) rsz += cur-&gt;r-&gt;sz;</span><br><span class="line">    <span class="keyword">if</span> (pre &amp;&amp; pre-&gt;r) rsz -= pre-&gt;r-&gt;sz;</span><br><span class="line">    <span class="keyword">if</span> (rsz &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; bit) + query(cur ? cur-&gt;r : <span class="literal">NULL</span>, pre ? pre-&gt;r : <span class="literal">NULL</span>, bit - <span class="number">1</span>, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> query(cur ? cur-&gt;l : <span class="literal">NULL</span>, pre ? pre-&gt;l : <span class="literal">NULL</span>, bit - <span class="number">1</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> lsz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (cur &amp;&amp; cur-&gt;l) lsz += cur-&gt;l-&gt;sz;</span><br><span class="line">    <span class="keyword">if</span> (pre &amp;&amp; pre-&gt;l) lsz -= pre-&gt;l-&gt;sz;</span><br><span class="line">    <span class="keyword">if</span> (lsz &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; bit) + query(cur ? cur-&gt;l : <span class="literal">NULL</span>, pre ? pre-&gt;l : <span class="literal">NULL</span>, bit - <span class="number">1</span>, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> query(cur ? cur-&gt;r : <span class="literal">NULL</span>, pre ? pre-&gt;r : <span class="literal">NULL</span>, bit - <span class="number">1</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>模板</tag>
        <tag>可持久化数据结构</tag>
        <tag>trie</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵求逆</title>
    <url>/2019/10/12/%E7%9F%A9%E9%98%B5%E6%B1%82%E9%80%86/</url>
    <content><![CDATA[<p>模板</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;LL&gt;&gt; mat;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  matrix(<span class="keyword">int</span> _n) &#123;</span><br><span class="line">    n = _n;</span><br><span class="line">    mat.resize(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;LL&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">identify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      mat[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">vector</span>&lt;LL&gt;&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">return</span> mat[x];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, LL val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">      mat[i][k] = (mat[i][k] + mat[j][k] * val % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> i, LL val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      mat[i][j] = (mat[i][j] * val % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mat[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">matrix a(n), b(n);</span><br><span class="line">b.identify();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> gauss = [&amp;]() -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i][i] == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[j][i] != <span class="number">0</span>) &#123;</span><br><span class="line">          swap(a[i], a[j]);</span><br><span class="line">          swap(b[i], b[j]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[i][i] == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LL inv = fpow(a[i][i], mod - <span class="number">2</span>);</span><br><span class="line">    a.multiply(i, inv);</span><br><span class="line">    b.multiply(i, inv);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      b.add(j, i, -a[j][i]);</span><br><span class="line">      a.add(j, i, -a[j][i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      b.add(i, j, -a[i][j]);</span><br><span class="line">      a.add(i, j, -a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>高斯消元</title>
    <url>/2019/10/12/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</url>
    <content><![CDATA[<p>模板</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt; mat;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  matrix(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : n(n), m(m) &#123;</span><br><span class="line">    mat.resize(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">return</span> mat[x];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">gauss</span><span class="params">(matrix &amp;a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> p = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[p][i]) &lt; <span class="built_in">fabs</span>(a[j][i])) &#123;</span><br><span class="line">        p = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p != i) &#123;</span><br><span class="line">      swap(a[p], a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[p][i]) &lt; eps) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      <span class="keyword">double</span> factor = a[j][i] / a[i][i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n + <span class="number">1</span>; k++) &#123;</span><br><span class="line">        a[j][k] -= factor * a[i][k];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      a[i][n + <span class="number">1</span>] -= a[j][n + <span class="number">1</span>] * a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    a[i][n + <span class="number">1</span>] /= a[i][i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>线性代数</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title>主席树</title>
    <url>/2019/10/12/%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
    <content><![CDATA[<ul>
<li>主席树的核心思想是多棵权值线段树对区间的划分具有一致性，且相同区间的值具有可减性。</li>
<li>可持久化的思想体现在对任意区间 [l,r] 的处理上。</li>
</ul>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> sz;</span><br><span class="line">  node *ls, *rs;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">()</span> </span>&#123; <span class="comment">// be careful</span></span><br><span class="line">      <span class="keyword">this</span>-&gt;sz = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (ls) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;sz += ls-&gt;sz;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">if</span> (rs) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;sz += rs-&gt;sz;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; pool[maxn * <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> node *<span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;pool[tot++];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">insert</span><span class="params">(node *pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  node *cur = newnode();</span><br><span class="line">  <span class="keyword">if</span> (pre) &#123; <span class="comment">// be careful</span></span><br><span class="line">    *cur = *pre;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    cur-&gt;sz += val;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">    cur-&gt;ls = insert(pre ? pre-&gt;ls : <span class="literal">NULL</span>, l, mid, pos, val);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cur-&gt;rs = insert(pre ? pre-&gt;rs : <span class="literal">NULL</span>, mid + <span class="number">1</span>, r, pos, val);</span><br><span class="line">  &#125;</span><br><span class="line">  cur-&gt;pull();</span><br><span class="line">  <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(node *cur, node *pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> lsz = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (cur &amp;&amp; cur-&gt;ls) lsz += cur-&gt;ls-&gt;sz; <span class="comment">// be careful</span></span><br><span class="line">  <span class="keyword">if</span> (pre &amp;&amp; pre-&gt;ls) lsz -= pre-&gt;ls-&gt;sz;</span><br><span class="line">  <span class="keyword">if</span> (k &lt;= lsz) &#123;</span><br><span class="line">    <span class="keyword">return</span> kth(cur ? cur-&gt;ls : <span class="literal">NULL</span>, pre ? pre-&gt;ls : <span class="literal">NULL</span>, l, mid, k);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> kth(cur ? cur-&gt;rs : <span class="literal">NULL</span>, pre ? pre-&gt;rs : <span class="literal">NULL</span>, mid + <span class="number">1</span>, r, k - lsz);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>模板</tag>
        <tag>可持久化数据结构</tag>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>动态树</title>
    <url>/2019/10/12/%E5%8A%A8%E6%80%81%E6%A0%91/</url>
    <content><![CDATA[<p>$LCT$ 是解决动态树问题的一种强力的数据结构，这种数据结构维护的是由若干 $splay$ 节点构成的森林。</p>
<p>$LCT$ 结构中采用了实链剖分的策略，即：将树边划分为实边和虚边，其中实边指的是 $splay$ 节点通过节点中儿子指针相连的边，虚边指的是通过父节点指针相连的边。实边所构成的所有点在同一棵 $splay$ 中，虚边连接不同的 $splay$。这样，就将原树的边集划分到了若干 $splay$ 中。</p>
<p>对于 $LCT$ 来说，需要明确一些概念，如下：</p>
<ul>
<li>原树本身可能不连通，即：真正的树本身就是一个森林。</li>
<li>$splay$ 维护的是每一个联通块中的树的路径</li>
<li>$access$ 操作的作用是使得当前节点与当前联通块的根节点在同一棵 $splay$ 中</li>
<li>$find_root$ 操作是找到当前节点所在的联通块中根节点的编号</li>
<li>单点修改值时，需要将被修改节点旋转到所在 $splay$ 的根节点，否则需要像线段树一样修改一条链。</li>
</ul>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  node *l, *r, *p;</span><br><span class="line">  <span class="keyword">int</span> val, sum, rev;</span><br><span class="line">  node(<span class="keyword">int</span> _val) : val(_val), sum(_val) &#123;</span><br><span class="line">    l = r = p = <span class="literal">NULL</span>;</span><br><span class="line">    rev = <span class="number">0</span>;    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">unsafe_reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    swap(l, r);</span><br><span class="line">    rev ^= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sum = val;</span><br><span class="line">    <span class="keyword">if</span> (l != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      l-&gt;p = <span class="keyword">this</span>;</span><br><span class="line">      sum ^= l-&gt;sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      r-&gt;p = <span class="keyword">this</span>;</span><br><span class="line">      sum ^= r-&gt;sum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rev) &#123;</span><br><span class="line">      <span class="keyword">if</span> (l != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        l-&gt;unsafe_reverse();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (r != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        r-&gt;unsafe_reverse();</span><br><span class="line">      &#125;</span><br><span class="line">      rev = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(node *v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v-&gt;p == <span class="literal">NULL</span> || (v-&gt;p-&gt;l != v &amp;&amp; v-&gt;p-&gt;r != v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(node *v)</span> </span>&#123;</span><br><span class="line">  node *u = v-&gt;p;</span><br><span class="line">  assert(u != <span class="literal">NULL</span>);</span><br><span class="line">  v-&gt;p = u-&gt;p;</span><br><span class="line">  <span class="keyword">if</span> (v-&gt;p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v-&gt;p-&gt;l == u) &#123;</span><br><span class="line">      v-&gt;p-&gt;l = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v-&gt;p-&gt;r == u) &#123;</span><br><span class="line">      v-&gt;p-&gt;r = v;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (v == u-&gt;r) &#123;</span><br><span class="line">    u-&gt;r = v-&gt;l;</span><br><span class="line">    v-&gt;l = u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (v == u-&gt;l) &#123;</span><br><span class="line">    u-&gt;l = v-&gt;r;</span><br><span class="line">    v-&gt;r = u;</span><br><span class="line">  &#125;</span><br><span class="line">  u-&gt;pull();</span><br><span class="line">  v-&gt;pull();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal_with_push</span><span class="params">(node *v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">stack</span>&lt;node*&gt; stk;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    stk.push(v);</span><br><span class="line">    <span class="keyword">if</span> (is_root(v)) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v = v-&gt;p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!stk.empty()) &#123;</span><br><span class="line">    stk.top()-&gt;push();</span><br><span class="line">    stk.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(node *v)</span> </span>&#123;</span><br><span class="line">  deal_with_push(v);</span><br><span class="line">  <span class="keyword">while</span> (!is_root(v)) &#123;</span><br><span class="line">    node *u = v-&gt;p;</span><br><span class="line">    <span class="keyword">if</span> (!is_root(u)) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((v == u-&gt;l) ^ (u == u-&gt;p-&gt;l)) &#123;</span><br><span class="line">        rotate(v);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rotate(u);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rotate(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(node *v)</span> </span>&#123;</span><br><span class="line">  node *u = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">while</span> (v != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    splay(v);</span><br><span class="line">    v-&gt;r = u;</span><br><span class="line">    v-&gt;pull();</span><br><span class="line">    u = v;</span><br><span class="line">    v = v-&gt;p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(node *v)</span> </span>&#123;</span><br><span class="line">  access(v);</span><br><span class="line">  splay(v);</span><br><span class="line">  v-&gt;unsafe_reverse();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node* <span class="title">find_root</span><span class="params">(node *v)</span> </span>&#123;</span><br><span class="line">  access(v);</span><br><span class="line">  splay(v);</span><br><span class="line">  <span class="keyword">while</span> (v-&gt;l != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    v-&gt;push();</span><br><span class="line">    v = v-&gt;l;</span><br><span class="line">  &#125;</span><br><span class="line">  splay(v);</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(node *v, node *u)</span> </span>&#123;</span><br><span class="line">  make_root(v);</span><br><span class="line">  access(u);</span><br><span class="line">  splay(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(node *v, node *u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (find_root(v) == find_root(u)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  make_root(v);</span><br><span class="line">  v-&gt;p = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(node *v, node *u)</span> </span>&#123;</span><br><span class="line">  make_root(v);</span><br><span class="line">  <span class="keyword">if</span> (find_root(u) == v &amp;&amp; u-&gt;p == v &amp;&amp; u-&gt;l == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    u-&gt;p = v-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line">    v-&gt;pull();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>动态树</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式</title>
    <url>/2019/10/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>多项式全家桶</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">998244353</span>, g = <span class="number">3</span>, ig = <span class="number">332748118</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="built_in">vector</span>&lt;LL&gt; &amp;v, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;rev, <span class="keyword">int</span> opt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tot = v.size();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) <span class="keyword">if</span> (i &lt; rev[i]) swap(v[i], v[rev[i]]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    LL wn = fpow(opt == <span class="number">1</span> ? g : ig, (mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j += mid &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">      LL w = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; k++) &#123;</span><br><span class="line">        LL x = v[j + k], y = v[j + mid + k] * w % mod;</span><br><span class="line">        v[j + k] = (x + y) % mod, v[j + mid + k] = (x - y + mod) % mod;</span><br><span class="line">        w = w * wn % mod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opt == <span class="number">-1</span>) &#123;</span><br><span class="line">    LL itot = fpow(tot, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) v[i] = v[i] * itot % mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多项式卷积</span></span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; convolution(<span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="keyword">int</span> cnta, <span class="built_in">vector</span>&lt;LL&gt; &amp;b, <span class="keyword">int</span> cntb, <span class="keyword">const</span> function&lt;LL(LL, LL)&gt; &amp;calc) &#123;</span><br><span class="line">	<span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (tot &lt;= <span class="number">2</span> * max(cnta, cntb)) bit++, tot &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rev(tot);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | (i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; foo(tot), bar(tot);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnta; i++) foo[i] = a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cntb; i++) bar[i] = b[i];</span><br><span class="line">	ntt(foo, rev, <span class="number">1</span>), ntt(bar, rev, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) foo[i] = calc(foo[i], bar[i]);</span><br><span class="line">	ntt(foo, rev, <span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多项式求导</span></span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; derivative(<span class="built_in">vector</span>&lt;LL&gt; &amp;a) &#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; b(a.size());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="keyword">int</span>)a.size(); i++) b[i - <span class="number">1</span>] = i * a[i] % mod;</span><br><span class="line">	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多项式积分</span></span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; integration(<span class="built_in">vector</span>&lt;LL&gt; &amp;a) &#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; b(a.size());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="keyword">int</span>)a.size(); i++) b[i] = a[i - <span class="number">1</span>] * fpow(i, mod - <span class="number">2</span>) % mod;</span><br><span class="line">	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多项式求逆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="built_in">vector</span>&lt;LL&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;b[<span class="number">0</span>] = fpow(a[<span class="number">0</span>], mod - <span class="number">2</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="keyword">int</span> mid = (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	Inv(mid, a, b);</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; bar = convolution(a, n, b, mid, [&amp;](LL a, LL b) &#123;<span class="keyword">return</span> b * (<span class="number">2</span> - a * b % mod + mod) % mod;&#125;);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) b[i] = bar[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多项式对数函数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; iexp(<span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="keyword">int</span> n) &#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; da = derivative(a);</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; ia(n);</span><br><span class="line">	Inv(n, a, ia);</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; b = convolution(ia, n, da, n, [&amp;](LL a, LL b) &#123;<span class="keyword">return</span> a * b % mod;&#125;);</span><br><span class="line">	b.resize(n);</span><br><span class="line">	<span class="keyword">return</span> integration(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分治fft</span></span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; convolution(<span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="keyword">int</span> sa, <span class="keyword">int</span> cnta, <span class="built_in">vector</span>&lt;LL&gt; &amp;b, <span class="keyword">int</span> sb, <span class="keyword">int</span> cntb, <span class="keyword">const</span> function&lt;LL(LL, LL)&gt; &amp;calc) &#123;</span><br><span class="line">	<span class="keyword">int</span> bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (tot &lt;= <span class="number">2</span> * max(cnta, cntb)) bit++, tot &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rev(tot);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | (i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; foo(tot), bar(tot);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = sa; i &lt; cnta; i++, j++) foo[i] = a[j];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = sb; i &lt; cntb; i++, j++) bar[i] = b[j];</span><br><span class="line">	ntt(foo, rev, <span class="number">1</span>), ntt(bar, rev, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) foo[i] = calc(foo[i], bar[i]);</span><br><span class="line">	ntt(foo, rev, <span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="built_in">vector</span>&lt;LL&gt; &amp;f, <span class="built_in">vector</span>&lt;LL&gt; &amp;w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	cdq(l, mid, f, w);</span><br><span class="line">	<span class="keyword">int</span> sz = r - l + <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;LL&gt; h = convolution(f, l, mid - l + <span class="number">1</span>, w, <span class="number">0</span>, sz, [&amp;](LL a, LL b) &#123;<span class="keyword">return</span> a * b % mod;&#125;);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++) f[i] = (f[i] + h[i - l]) % mod;</span><br><span class="line">	cdq(mid + <span class="number">1</span>, r, f, w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>博客简介</title>
    <url>/2019/10/12/%E5%8D%9A%E5%AE%A2%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>这是 shellpicker 的第二个博客，初衷是用来存放 icpc 模板的。</p>
]]></content>
      <categories>
        <category>博客简介</category>
      </categories>
      <tags>
        <tag>博客简介</tag>
      </tags>
  </entry>
</search>
